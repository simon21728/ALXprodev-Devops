#!/bin/bash
# batchProcessing-0x04
# Script to fetch multiple Pokémon data in parallel with proper process management

OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Function to fetch data for a single Pokémon
fetch_pokemon() {
    local pokemon=$1
    echo "Fetching data for $pokemon..."
    
    response=$(curl -s -w "%{http_code}" -o "$OUTPUT_DIR/$pokemon.json" "https://pokeapi.co/api/v2/pokemon/$pokemon")
    http_code="${response: -3}"

    if [ "$http_code" -eq 200 ]; then
        echo "Saved data to $OUTPUT_DIR/$pokemon.json "
    else
        echo "Failed to fetch $pokemon (HTTP $http_code). Logging to errors.txt."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Failed to fetch $pokemon. HTTP status: $http_code" >> errors.txt
        [ -f "$OUTPUT_DIR/$pokemon.json" ] && rm "$OUTPUT_DIR/$pokemon.json"
    fi
}

# Launch all fetches in parallel and save PIDs
pids=()
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Show running background jobs
jobs

# Wait for all background processes
for pid in "${pids[@]}"; do
    if kill -0 "$pid" 2>/dev/null; then
        wait "$pid"
    fi
done

# Optional: Kill any stray background jobs
for job in $(jobs -p); do
    kill "$job" 2>/dev/null
done

echo "All Pokémon data fetches completed."
